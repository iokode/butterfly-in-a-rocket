---
import {getCollection, getEntry} from "astro:content";
import {Markdown} from 'astro-remote';
import PostLayout from "../../layouts/PostLayout.astro";
import Comments from "../../components/Comments.svelte";
import Alert from "../../components/Entry/Alert.astro";
import Message from "../../components/Entry/Message.astro";

const allowedComponents = {Alert, Message};

export const getStaticPaths = async function () {
    const posts = await getCollection('posts');
    const tags = await getCollection('tags');

    const mappedPosts = posts.map(async post => {
        const license = (await getEntry('licenses', post.data.license))!;
        let postTags = post.data.tags.map(tag => tags.find(t => t.id === tag)!);
        postTags = postTags.filter(tag => tag !== undefined);

        return {
            params: {slug: post.data.slug},
            props: {
                body: post.body,
                post: post.data as {
                    author: string,
                    title: string,
                    publishDate: Date,
                    slug: string,
                    discussionId: number
                },
                license: license.data,
                tags: postTags,
            }
        }
    })

    return Promise.all(mappedPosts);
};
---

<PostLayout {...Astro.props.post} license={Astro.props.license}>
    <Markdown content={Astro.props.body} sanitize={{allowComponents: true}} components={allowedComponents}/>

    <div id="tags">
        Tags:
        <ul>
            {Astro.props.tags.map(tag => <li><a href={`/archive/${tag.id}`}>{tag.data.name}</a></li>)}
        </ul>
    </div>

    <Comments client:visible discussionId={Astro.props.post.discussionId} author={Astro.props.post.author}/>
</PostLayout>

<style lang="scss">
    @use '../../styles/variables/borders';

    #tags {
        // Boxing
        width: fit-content;
        padding: 0 .5em;
        margin-left: auto;

        // Style
        border: borders.$default;

        ul {
            // Boxing
            display: inline-flex;
            margin: 0 0 0 1em;
            padding: 0;

            // Flex
            flex-wrap: wrap;
            gap: 1em;

            li {
                // Style
                list-style-type: none;
            }
        }

        @media print {
            // Boxing
            display: none;
        }
    }
</style>